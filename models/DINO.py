import copy
import math
from functools import wraps
import torch
from torch import nn
import torch.nn.functional as F
from torchvision import transforms as T
from .common import get_module_device, default

# helper functions

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def default(val, def_val):
    return def_val if val is None else val


def singleton(cache_key):
    def inner_fn(fn):
        @wraps(fn)
        def wrapper(self, *args, **kwargs):
            instance = getattr(self, cache_key)
            if instance is not None:
                return instance

            instance = fn(self, *args, **kwargs)
            setattr(self, cache_key, instance)
            return instance
        return wrapper
    return inner_fn


def get_module_device(module):
    return next(module.parameters()).device


def set_requires_grad(model, val):
    for p in model.parameters():
        p.requires_grad = val


# exponential moving average

class EMA():
    def __init__(self, beta):
        super().__init__()
        self.beta = beta

    def update_average(self, old, new):
        if old is None:
            return new
        return old * self.beta + (1 - self.beta) * new

class CosineDecayEMA():
    def __init__(self, tau, max_steps):
        super().__init__()
        self.base_tau = tau
        self.curr_step = 0
        self.max_steps = max_steps

    def update_average(self, old, new):
        if old is None:
            return new
        tau = 1 - (1-self.base_tau)*(math.cos(math.pi*self.curr_step/self.max_steps)+1)/2
        self.curr_step += 1
        return old * tau + (1 - tau) * new

def update_moving_average(ema_updater, ma_model, current_model):
    for current_params, ma_params in zip(current_model.parameters(), ma_model.parameters()):
        old_weight, up_weight = ma_params.data, current_params.detach().data
        ma_params.data = ema_updater.update_average(old_weight, up_weight)

# main class

class L2NormalizationLayer(nn.Module):
    def __init__(self, dim=1):
        super(L2NormalizationLayer, self).__init__()
        self.dim = dim

    def forward(self, x):
        return F.normalize(x, p=2, dim=self.dim)

class DINO(nn.Module):
    def __init__(
            self,
            encoder,
            image_size,
            projection_size = 256,
            projection_hidden_size = 2048,
            output_size = 1024,
            augment_fn = None,
            augment_fn2 = None,
            moving_average_decay = 0.996,
            use_momentum = True,
            cosine_ema_steps = None,
            student_temp = 0.1,
            teacher_temp = 0.04,
            centering_momentum = 0.9
    ):
        super().__init__()
        device = get_module_device(encoder)
        # self.online_encoder = NetWrapper(net, layer=hidden_layer)
        self.student_temp = student_temp
        self.teacher_temp = teacher_temp
        self.C = None
        self.centering_momentum = centering_momentum
        self.online_encoder = encoder

        self.use_momentum = use_momentum
        self.target_encoder = None
        if cosine_ema_steps:
            self.target_ema_updater = CosineDecayEMA(moving_average_decay, cosine_ema_steps)
        else:
            self.target_ema_updater = EMA(moving_average_decay)

        dummy = self.online_encoder(torch.randn(2, 3, image_size, image_size, device=device))
        self.online_MLP = torch.nn.Sequential(
            torch.nn.Linear(dummy.shape[1], projection_hidden_size),
            torch.nn.GELU(),
            torch.nn.Linear(projection_hidden_size, projection_hidden_size),
            torch.nn.GELU(),
            torch.nn.Linear(projection_hidden_size, projection_size),
            L2NormalizationLayer()
        )
        self.target_MLP = copy.deepcopy(self.online_MLP)
        # self.apply(self._init_weights)
        self.online_last_layer = nn.utils.weight_norm(nn.Linear(projection_size, output_size, bias=False))
        self.target_last_layer = nn.utils.weight_norm(nn.Linear(projection_size, output_size, bias=False))
        self.online_last_layer.weight_g.data.fill_(1)
        self.online_last_layer.weight_g.requires_grad = False
        self.target_last_layer.weight_g.data.fill_(1)
        self.target_last_layer.weight_g.requires_grad = False
        self.online_projector = torch.nn.Sequential(
            self.online_MLP,
            self.online_last_layer
        )
        self.target_projector = torch.nn.Sequential(
            self.target_MLP,
            self.target_last_layer,
        )

        # self.target_MLP = torch.nn.Sequential(
        #     torch.nn.Linear(dummy.shape[1], projection_hidden_size),
        #     torch.nn.GELU(),
        #     torch.nn.Linear(projection_hidden_size, projection_hidden_size),
        #     torch.nn.GELU(),
        #     torch.nn.Linear(projection_hidden_size, projection_size),
        #     L2NormalizationLayer()
        # )
        # self.apply(self._init_weights)
        # self.target_last_layer = nn.utils.weight_norm(nn.Linear(projection_size, output_size, bias=False))
        # self.target_last_layer.weight_g.data.fill_(1)
        # self.target_last_layer.weight_g.requires_grad = False
        # self.target_projector = torch.nn.Sequential(
        #     self.target_MLP,
        #     self.target_last_layer
        # )

    
        
        self.to(device)

        DEFAULT_AUG = T.Compose([])
        self.augment1 = default(augment_fn, DEFAULT_AUG)
        self.augment2 = default(augment_fn2, self.augment1)

        # send a mock image tensor to instantiate singleton parameters
        # self.forward(torch.randn(2, 3, image_size, image_size, device=device))

    def loss_fn(self, t, s):
        t = t.detach()
        s = torch.softmax(s / self.student_temp, dim=1)
        t = torch.softmax((t - self.C) / self.teacher_temp, dim=1) 
        return - (t * torch.log(s)).sum(dim=1).mean()

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)

    @singleton('target_encoder')
    def _get_target_encoder(self):
        target_encoder = copy.deepcopy(self.online_encoder)
        set_requires_grad(target_encoder, False)
        return target_encoder
    
    # @singleton('target_projector')
    # def _get_target_projector(self):
    #     target_projector = copy.deepcopy(self.online_projector)
    #     set_requires_grad(target_projector, False)
    #     return target_projector

    def reset_moving_average(self):
        del self.target_encoder
        self.target_encoder = None

    def update_moving_average(self):
        assert self.use_momentum, 'you do not need to update the moving average, since you have turned off momentum for the target encoder'
        assert self.target_encoder is not None, 'target encoder has not been created yet'
        assert self.target_projector is not None, 'target projector has not been created yet'
        update_moving_average(self.target_ema_updater, self.target_encoder, self.online_encoder)
        update_moving_average(self.target_ema_updater, self.target_projector, self.online_projector)

    def forward(
            self,
            x,
            return_embedding = False,
    ):

        if return_embedding == 'online':
            return self.online_encoder(x)
        elif return_embedding == 'target':
            target_encoder = self._get_target_encoder() if self.use_momentum else self.online_encoder
            return target_encoder(x)

        image_one, image_two = self.augment1(x), self.augment2(x)

        online_embed_one = self.online_encoder(image_one)
        online_proj_one = self.online_projector(online_embed_one)

        with torch.no_grad():
            target_encoder = self._get_target_encoder() if self.use_momentum else self.online_encoder
            # target_projector = self._get_target_projector() if self.use_momentum else self.online_projector
            target_embed_two = target_encoder(image_two)
            target_proj_two = self.target_projector(target_embed_two)
            if self.C == None:
                self.C = target_proj_two.mean(dim=0)
            else:
                self.C = self.centering_momentum * self.C + (1 - self.centering_momentum) * target_proj_two.mean(dim=0)

        loss = self.loss_fn(target_proj_two, online_proj_one)
        return loss.mean()
